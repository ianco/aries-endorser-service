version: "3.9"
services:
  endorser-admin:
    build:
      context: ../endorser-admin
      dockerfile: Dockerfile.endorser-admin
    environment:
      WEB_HOST_NAME: ${ADMIN_WEB_HOST_NAME}
      WEB_HOST_PORT: ${ADMIN_WEB_HOST_PORT}
      WEB_HOST_TLS: ${ADMIN_WEB_HOST_TLS}
      API_HOST: ${ADMIN_API_HOST}
      API_PORT: ${ENDORSER_SERVICE_PORT}
    volumes:
      - ../endorser-admin/public/config/Caddyfile:/etc/caddy/Caddyfile
      - ../endorser-admin/public/config/admin:/srv/config
    ports:
      - ${ADMIN_WEB_HOST_PORT_EXPOSED}:${ADMIN_WEB_HOST_PORT}

  ngrok-endorser-agent:
    image: wernight/ngrok
    environment:
      - ACAPY_HTTP_PORT=${ACAPY_HTTP_PORT}
    ports:
      - ${NGROK_ENDORSER_AGENT_PORT_EXPOSED}:${NGROK_ENDORSER_AGENT_PORT}
    command: ngrok http endorser-agent:${ACAPY_HTTP_PORT} --log stdout

  endorser-agent:
    build:
      context: ./acapy
      dockerfile: Dockerfile.acapy
    depends_on:
      endorser-agent-db:
        condition: service_healthy
    ports:
      - ${ACAPY_ENDORSER_ADMIN_PORT}:${ACAPY_ENDORSER_ADMIN_PORT}
      - ${ACAPY_ENDORSER_HTTP_PORT}:${ACAPY_ENDORSER_HTTP_PORT}
    environment:
      - ENDORSER_ENV=${ENDORSER_ENV}
      - NGROK_NAME=ngrok-endorser-agent
      - ACAPY_HTTP_PORT=${ACAPY_HTTP_PORT}
      - ENDORSER_WEBHOOK_URL=${ENDORSER_WEBHOOK_URL}
      - LEDGER_URL=${LEDGER_URL}
      - GENESIS_URL=${GENESIS_URL}
      - ACAPY_ENDPOINT=${ACAPY_ENDPOINT}
      - ACAPY_WALLET_DATABASE=${ACAPY_WALLET_DATABASE}
      - ACAPY_WALLET_ENCRYPTION_KEY=${ACAPY_WALLET_ENCRYPTION_KEY}
      - ACAPY_WALLET_STORAGE_TYPE=${ACAPY_WALLET_STORAGE_TYPE}
      - POSTGRESQL_HOST=${WALLET_POSTGRESQL_HOST}
      - POSTGRESQL_USER=${WALLET_POSTGRESQL_USER}
      - POSTGRESQL_PASSWORD=${WALLET_POSTGRESQL_PASSWORD}
      - ACAPY_ADMIN_PORT=${ACAPY_ADMIN_PORT}
      - AGENT_NAME=${AGENT_NAME}
      - ACAPY_ADMIN_CONFIG=${ACAPY_ADMIN_CONFIG}
      - ENDORSER_SEED=${ENDORSER_SEED}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - ${ACAPY_ADMIN_PORT_EXPOSED}:${ACAPY_ADMIN_PORT}
      - ${ACAPY_HTTP_PORT_EXPOSED}:${ACAPY_HTTP_PORT}
    entrypoint: /bin/bash
    command: [
        "-c",
        "curl -d '{\"seed\":\"${ENDORSER_SEED}\", \"role\":\"ENDORSER\", \"alias\":\"${AGENT_NAME}\"}' -X POST ${LEDGER_URL}/register; \
        sleep 5; \
        ./ngrok-wait.sh"
      ]
    extra_hosts:
      - host.docker.internal:host-gateway

  endorser-agent-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: ${WALLET_POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${WALLET_POSTGRESQL_PASSWORD}
    ports:
      - ${ENDORSER_POSTGRESQL_PORT_EXPOSED}:${ENDORSER_POSTGRESQL_PORT}
    volumes:
      - endorser-wallet:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  endorser-api:
    build:
      context: ../endorser
      dockerfile: Dockerfile.endorser
    depends_on:
      endorser-agent:
        condition: service_started
      endorser-db:
        condition: service_healthy
    environment:
      - CONTROLLER_POSTGRESQL_HOST=${CONTROLLER_POSTGRESQL_HOST}
      - CONTROLLER_POSTGRESQL_PORT=${CONTROLLER_POSTGRESQL_PORT}
      - CONTROLLER_POSTGRESQL_DB=${CONTROLLER_POSTGRESQL_DB}
      - ENDORSER_API_ADMIN_USER=${ENDORSER_API_ADMIN_USER}
      - ENDORSER_API_ADMIN_KEY=${ENDORSER_API_ADMIN_KEY}
      - ACAPY_ADMIN_URL=${ENDORSER_ACAPY_ADMIN_URL}
      - ACAPY_API_ADMIN_KEY=${ACAPY_API_ADMIN_KEY}
      - ENDORSER_ENV=${ENDORSER_ENV}
      - ENDORSER_AUTO_ACCEPT_CONNECTIONS=${ENDORSER_AUTO_ACCEPT_CONNECTIONS}
      - ENDORSER_AUTO_ACCEPT_AUTHORS=${ENDORSER_AUTO_ACCEPT_AUTHORS}
      - ENDORSER_AUTO_ENDORSE_REQUESTS=${ENDORSER_AUTO_ENDORSE_REQUESTS}
      - WEB_CONCURRENCY=${WEB_CONCURRENCY}
      - ACAPY_WEBHOOK_URL_API_KEY=${ACAPY_WEBHOOK_URL_API_KEY}
    ports:
      - ${ENDORSER_SERVICE_PORT_EXPOSED}:${ENDORSER_SERVICE_PORT}
    extra_hosts:
      - host.docker.internal:host-gateway

  endorser-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: ${CONTROLLER_POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${CONTROLLER_POSTGRESQL_PASSWORD}
    ports:
      - ${CONTROLLER_POSTGRESQL_PORT_EXPOSED}:${CONTROLLER_POSTGRESQL_PORT}
    volumes:
      - endorser-controller:/var/lib/postgresql/data
      - ./db_init.sql:/docker-entrypoint-initdb.d/1-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  #
  # keycloak service
  #
  keycloak:
    image: jboss/keycloak:12.0.4
    environment:
      DB_VENDOR: ${KEYCLOAK_DB_VENDOR}
      DB_ADDR: ${KEYCLOAK_DB_ADDR}
      DB_DATABASE: ${KEYCLOAK_DB_NAME}
      DB_USER: ${KEYCLOAK_DB_USER}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_LOGLEVEL: ${KEYCLOAK_LOGLEVEL}
      ROOT_LOGLEVEL: ${KEYCLOAK_ROOT_LOGLEVEL}
      KEYCLOAK_IMPORT: ${KEYCLOAK_IMPORT}
    volumes:
      - ../docker/keycloak/config/realm-export-docker.json:/tmp/realm-export-docker.json
    ports:
      - ${KEYCLOAK_SERVICE_PORT_EXPOSED}:${KEYCLOAK_SERVICE_PORT}
    depends_on:
      - keycloak-db

  #
  # keycloak-db
  #
  keycloak-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data

volumes:
  endorser-wallet:
  endorser-controller:
  keycloak-db-data:
